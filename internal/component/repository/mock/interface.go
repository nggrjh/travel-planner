// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInsertUser is a mock of InsertUser interface.
type MockInsertUser struct {
	ctrl     *gomock.Controller
	recorder *MockInsertUserMockRecorder
}

// MockInsertUserMockRecorder is the mock recorder for MockInsertUser.
type MockInsertUserMockRecorder struct {
	mock *MockInsertUser
}

// NewMockInsertUser creates a new mock instance.
func NewMockInsertUser(ctrl *gomock.Controller) *MockInsertUser {
	mock := &MockInsertUser{ctrl: ctrl}
	mock.recorder = &MockInsertUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertUser) EXPECT() *MockInsertUserMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockInsertUser) InsertUser(ctx context.Context, username, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, username, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockInsertUserMockRecorder) InsertUser(ctx, username, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockInsertUser)(nil).InsertUser), ctx, username, email, password)
}
