package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"errors"

	"github.com/nggrjh/travel-planner/internal/component/controller/resolver/model"
	"github.com/nggrjh/travel-planner/internal/infrastructure/server/graph"
)

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, email string, password string) (*model.User, error) {
	if len(email) < 1 { // TODO: validate email properly
		return nil, errors.New("invalid email")
	}

	if len(password) < 1 { // TODO: validate password properly
		return nil, errors.New("invalid password")
	}

	if err := r.userRegistration.RegisterUser(ctx, email, password); err != nil {
		return nil, err
	}

	return &model.User{Email: email}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
